// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model School {
  id       String    @id @default(uuid())
  email    String    @unique
  name     String
  logo     String
  classes  String[]
  sections String[]
  subjects String[]
  teachers Teacher[]
  surveys  Survey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Teacher {
  id      String @id @default(uuid())
  name    String
  subject String

  schoolId String
  School   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId])
}

model Survey {
  id                    String   @id @default(uuid())
  name                  String
  expiry                String
  status                String
  subjects              String[]
  surveyId              String
  totalExpectedStudents String
  uri                   String

  participantDetails Participant[]
  subjectDetails     SubjectRatingDetail[]
  teacherDetails     TeacherRatingDetail[]
  optional           OptionalField[]

  schoolId String
  School   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Participant {
  id           String @id @default(uuid())
  studentName  String
  class        String
  guardianName String
  section      String

  surveyId String
  Survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
}

model SubjectRatingDetail {
  id      String          @id @default(uuid())
  name    String
  ratings SubjectRating[]

  surveyId String
  Survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
}

model SubjectRating {
  id             String @id @default(uuid())
  questionId     String
  highlyAgree    Int    @default(0)
  agree          Int    @default(0)
  disagree       Int    @default(0)
  highlyDisagree Int    @default(0)

  subjectId String
  Subject   SubjectRatingDetail @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([subjectId])
}

model TeacherRatingDetail {
  id      String          @id @default(uuid())
  name    String
  ratings TeacherRating[]

  surveyId String
  Survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
}

model TeacherRating {
  id             String @id @default(uuid())
  questionId     String
  highlyAgree    Int    @default(0)
  agree          Int    @default(0)
  disagree       Int    @default(0)
  highlyDisagree Int    @default(0)

  teacherRatingDetailId String
  TeacherRatingDetail   TeacherRatingDetail @relation(fields: [teacherRatingDetailId], references: [id], onDelete: Cascade)

  @@index([teacherRatingDetailId])
}

model OptionalField {
  id          String  @id @default(uuid())
  anonymous   String?
  abuseReport String?

  surveyId String
  Survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
}
